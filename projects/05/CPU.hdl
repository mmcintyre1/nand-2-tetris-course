// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the input instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A or C instruction
    Not(in=instruction[15], out=isAInst);
    Not(in=isAInst, out=isCInst);

    // choose ALU output or instruction to set A
    Mux16(a=aluBackIn, b=instruction, sel=isAInst, out=toARegister);

    // write to A register if A instruction OR first destination bit == 1
    Or(a=isAInst, b=instruction[5], out=setA);

    // write to D register if second destination bit is 1 and not A instruction
    And(a=isCInst, b=instruction[4], out=setD);

    // registers
    ARegister(in=toARegister, load=setA, out=outA, out[0..14]=addressM, out=toPC);
    DRegister(in=aluBackIn, load=setD, out=outD);

    // if a==1 and A instruction, then use A, if not, use M for ALU x input
    And(a=isCInst, b=instruction[12], out=aOrM);
    Mux16(a=outA, b=inM, sel=aOrM, out=aMuxOut);

    ALU(
        x=outD,
        y=aMuxOut,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outM,
        out=aluBackIn,
        zr=zr,
        ng=ng
    );

    // set writetM == 1 if C instruction and destination bit set
    And(a=instruction[15], b=instruction[3], out=writeM);

    // jump logic
    Not(in=ng, out=ge); // output >= 0
    Not(in=zr, out=nz); // output != 0
    And(a=ge, b=nz, out=pos); // output > 0

    And(a=instruction[0], b=pos, out=jmp0);
    And(a=instruction[1], b=zr, out=jmp1);
    And(a=instruction[2], b=ng, out=jmp2);

    Or(a=jmp0, b=jmp1, out=jmp1Or2);
    Or(a=jmp1Or2, b=jmp2, out=jmp1Or2Or3);
    And(a=isCInst, b=jmp1Or2Or3, out=jmp); // don't jump if A instruction

    // PC
    // increment is always true because of conditional logic
    PC(in=toPC, load=jmp, inc=true, reset=reset, out[0..14]=pc);
}