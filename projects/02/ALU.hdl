// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // zx, nx
    Mux16(a=x, b[0..15]=false, sel=zx, out=zxOut); // zero x input if zx
    Not16(in=zxOut, out=notX); // pre-compute negated x
    Mux16(a=zxOut, b=notX, sel=nx, out=nxOut); // negate x input if nx

    // zy, ny
    Mux16(a=y, b[0..15]=false, sel=zy, out=zyOut); // zero y input if zy
    Not16(in=zyOut, out=notY); // pre-compute negated y
    Mux16(a=zyOut, b=notY, sel=ny, out=nyOut); // negate y input if ny

    // f - x & y or x + y
    Add16(a=nyOut, b=nxOut, out=fAddOut);
    And16(a=nyOut, b=nxOut, out=fAndOut);
    Mux16(a=fAndOut, b=fAddOut, sel=f, out=fOut); // if sel = 1, x + y (b), else x & y (a)

    // no
    Not16(in=fOut, out=noNotOut);
    Mux16(a=fOut, b=noNotOut, sel=no, out=out, out[15]=negCheck, out[0..15]=zeroCheck);

    // zr
    // alternatively, we could use a 16 way nor gate to abstract the Not gate
    Or16Way(in=zeroCheck, out=isZero); // had to implement this chip
    Not(in=isZero, out=zr);

    // ng
    Or(a=negCheck, b=false, out=ng);
}